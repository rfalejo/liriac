/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/editor/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return the current editor snapshot. */
        get: operations["editor_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/block-conversions/{conversion_id}/apply/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Apply a stored block conversion suggestion to a chapter. */
        post: operations["library_block_conversions_apply_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/books/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return the list of books and chapter summaries. */
        get: operations["library_books_retrieve"];
        put?: never;
        /** @description Return the list of books and chapter summaries. */
        post: operations["library_books_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/books/{book_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Update metadata for a single book. */
        delete: operations["library_books_destroy"];
        options?: never;
        head?: never;
        /** @description Update metadata for a single book. */
        patch: operations["library_books_partial_update"];
        trace?: never;
    };
    "/api/library/books/{book_id}/chapters/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Manage chapters belonging to a single book. */
        post: operations["library_books_chapters_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/books/{book_id}/context/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return the context sections scoped to a specific book (optionally a chapter). */
        get: operations["library_books_context_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/books/{book_id}/context/items/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Update editable fields for context items belonging to a book. */
        post: operations["library_books_context_items_create"];
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update editable fields for context items belonging to a book. */
        patch: operations["library_books_context_items_partial_update"];
        trace?: never;
    };
    "/api/library/books/{book_id}/context/items/{section_slug}/{item_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete a single context item belonging to a book. */
        delete: operations["library_books_context_items_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/chapters/{chapter_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return the full content for a single chapter. */
        get: operations["library_chapters_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Return the full content for a single chapter. */
        patch: operations["library_chapters_partial_update"];
        trace?: never;
    };
    "/api/library/chapters/{chapter_id}/block-conversions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Generate a block conversion suggestion using Gemini. */
        post: operations["library_chapters_block_conversions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/chapters/{chapter_id}/blocks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create blocks within a chapter. */
        post: operations["library_chapters_blocks_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/chapters/{chapter_id}/blocks/{block_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Update a single block within a chapter. */
        delete: operations["library_chapters_blocks_destroy"];
        options?: never;
        head?: never;
        /** @description Update a single block within a chapter. */
        patch: operations["library_chapters_blocks_partial_update"];
        trace?: never;
    };
    "/api/library/chapters/{chapter_id}/blocks/{block_id}/versions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List the versions available for a block. */
        get: operations["library_chapters_blocks_versions_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/chapters/{chapter_id}/blocks/{block_id}/versions/{version}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete a specific block version. */
        delete: operations["library_chapters_blocks_versions_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/chapters/{chapter_id}/context-visibility/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return or update the per-chapter visibility of context items. */
        get: operations["library_chapters_context_visibility_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Return or update the per-chapter visibility of context items. */
        patch: operations["library_chapters_context_visibility_partial_update"];
        trace?: never;
    };
    "/api/library/chapters/{chapter_id}/paragraph-suggestion/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Return an AI-generated suggestion for a chapter paragraph. */
        post: operations["library_chapters_paragraph_suggestion_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/library/chapters/{chapter_id}/paragraph-suggestion/prompt/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return the raw prompt used for paragraph suggestions. */
        get: operations["library_chapters_paragraph_suggestion_prompt_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BlockConversionApply: {
            anchorBlockId?: string;
            /** @default append */
            placement: components["schemas"]["PlacementEnum"];
        };
        BlockConversionBlock: {
            type: components["schemas"]["BlockConversionBlockTypeEnum"];
            text?: string;
            turns?: components["schemas"]["BlockConversionTurn"][];
            context?: string;
        };
        /**
         * @description * `paragraph` - paragraph
         *     * `dialogue` - dialogue
         * @enum {string}
         */
        BlockConversionBlockTypeEnum: "paragraph" | "dialogue";
        BlockConversionRequest: {
            text: string;
            instructions?: string;
            contextBlockId?: string;
        };
        BlockConversionResponse: {
            conversionId: string;
            blocks: components["schemas"]["BlockConversionBlock"][];
        };
        BlockConversionTurn: {
            id?: string;
            speakerId?: string | null;
            speakerName?: string | null;
            utterance: string;
            stageDirection?: string | null;
        };
        BookUpsert: {
            id?: string;
            title: string;
            author?: string;
            synopsis?: string;
            order?: number;
        };
        ChapterBlock: {
            id: string;
            type: components["schemas"]["ChapterBlockTypeEnum"];
            position: number;
            version?: number;
            readonly activeVersion: number;
            readonly versionCount: number;
            text?: string;
            style?: string | null;
            tags?: string[];
            turns?: components["schemas"]["DialogueTurn"][];
            context?: string | null;
            label?: string | null;
            summary?: string | null;
            locationId?: string | null;
            locationName?: string | null;
            timestamp?: string | null;
            mood?: string | null;
            kind?: string | null;
            title?: string | null;
            subtitle?: string | null;
            ordinal?: number | null;
            epigraph?: string | null;
            epigraphAttribution?: string | null;
            povCharacterId?: string | null;
            povCharacterName?: string | null;
            timelineMarker?: string | null;
            themeTags?: string[];
            status?: string | null;
            owner?: string | null;
            lastUpdated?: string | null;
            narrativeContext?: components["schemas"]["NarrativeContext"] | null;
            sceneDetails?: components["schemas"]["SceneDetails"] | null;
        };
        ChapterBlockCreate: {
            id?: string;
            type: components["schemas"]["ChapterBlockTypeEnum"];
            position?: number;
            version?: number;
            readonly activeVersion: number;
            readonly versionCount: number;
            text?: string;
            style?: string | null;
            tags?: string[];
            turns?: components["schemas"]["DialogueTurn"][];
            context?: string | null;
            label?: string | null;
            summary?: string | null;
            locationId?: string | null;
            locationName?: string | null;
            timestamp?: string | null;
            mood?: string | null;
            kind?: string | null;
            title?: string | null;
            subtitle?: string | null;
            ordinal?: number | null;
            epigraph?: string | null;
            epigraphAttribution?: string | null;
            povCharacterId?: string | null;
            povCharacterName?: string | null;
            timelineMarker?: string | null;
            themeTags?: string[];
            status?: string | null;
            owner?: string | null;
            lastUpdated?: string | null;
            narrativeContext?: components["schemas"]["NarrativeContext"] | null;
            sceneDetails?: components["schemas"]["SceneDetails"] | null;
        };
        /**
         * @description * `paragraph` - paragraph
         *     * `dialogue` - dialogue
         *     * `scene_boundary` - scene_boundary
         *     * `metadata` - metadata
         * @enum {string}
         */
        ChapterBlockTypeEnum: "paragraph" | "dialogue" | "scene_boundary" | "metadata";
        ChapterBlockVersion: {
            version: number;
            isActive: boolean;
            payload: unknown;
        };
        ChapterBlockVersionList: {
            versions: components["schemas"]["ChapterBlockVersion"][];
        };
        ChapterContextVisibilityUpdateItem: {
            id: string;
            sectionSlug: string;
            visible: boolean;
        };
        ChapterDetail: {
            id: string;
            title: string;
            summary?: string | null;
            ordinal: number;
            tokens?: number | null;
            wordCount?: number | null;
            content: string;
            paragraphs: string[];
            blocks: components["schemas"]["ChapterBlock"][];
            bookId?: string | null;
            bookTitle?: string | null;
        };
        ChapterSummary: {
            id: string;
            title: string;
            summary?: string | null;
            ordinal: number;
            tokens?: number | null;
            wordCount?: number | null;
        };
        ChapterUpsert: {
            id?: string;
            title: string;
            summary?: string | null;
            ordinal?: number;
            tokens?: number | null;
            wordCount?: number | null;
        };
        ContextItem: {
            id: string;
            type: components["schemas"]["ContextItemTypeEnum"];
            name?: string;
            role?: string;
            summary?: string;
            title?: string;
            description?: string;
            facts?: string;
            tokens?: number;
            checked?: boolean;
            disabled?: boolean;
            chapterId?: string | null;
            visibleForChapter?: boolean;
        };
        ContextItemCreate: {
            sectionSlug: string;
            type: components["schemas"]["ContextItemTypeEnum"];
            id?: string;
            chapterId?: string | null;
            name?: string | null;
            role?: string | null;
            summary?: string | null;
            title?: string | null;
            description?: string | null;
            facts?: string | null;
            tokens?: number | null;
            checked?: boolean;
            disabled?: boolean;
        };
        /**
         * @description * `character` - character
         *     * `world` - world
         *     * `styleTone` - styleTone
         *     * `chapter` - chapter
         * @enum {string}
         */
        ContextItemTypeEnum: "character" | "world" | "styleTone" | "chapter";
        ContextItemUpdate: {
            id: string;
            sectionSlug: string;
            chapterId?: string | null;
            name?: string | null;
            role?: string | null;
            summary?: string | null;
            title?: string | null;
            description?: string | null;
            facts?: string | null;
        };
        ContextSection: {
            id: string;
            title: string;
            defaultOpen?: boolean;
            items: components["schemas"]["ContextItem"][];
        };
        DialogueTurn: {
            id: string;
            speakerId?: string | null;
            speakerName?: string | null;
            utterance: string;
            stageDirection?: string | null;
            tone?: string | null;
        };
        EditorState: {
            content: string;
            paragraphs: string[];
            blocks: components["schemas"]["ChapterBlock"][];
            tokens: number;
            cursor?: number | null;
            bookId?: string | null;
            bookTitle?: string | null;
            chapterId?: string | null;
            chapterTitle?: string | null;
        };
        LibraryBook: {
            id: string;
            title: string;
            author?: string | null;
            synopsis?: string | null;
            chapters: components["schemas"]["ChapterSummary"][];
        };
        LibraryBooksResponse: {
            books: components["schemas"]["LibraryBook"][];
        };
        LibraryResponse: {
            sections: components["schemas"]["ContextSection"][];
        };
        NarrativeContext: {
            povCharacterId?: string | null;
            povCharacterName?: string | null;
            timelineMarker?: string | null;
            locationId?: string | null;
            locationName?: string | null;
            themeTags?: string[] | null;
        };
        ParagraphSuggestionPromptResponse: {
            prompt: string;
        };
        ParagraphSuggestionRequest: {
            blockId?: string;
            instructions?: string;
        };
        ParagraphSuggestionResponse: {
            paragraphSuggestion: string;
        };
        PatchedBookUpsert: {
            id?: string;
            title?: string;
            author?: string;
            synopsis?: string;
            order?: number;
        };
        PatchedChapterBlockUpdate: {
            id?: string;
            type?: components["schemas"]["ChapterBlockTypeEnum"];
            position?: number;
            version?: number;
            readonly activeVersion?: number;
            readonly versionCount?: number;
            text?: string;
            style?: string | null;
            tags?: string[];
            turns?: components["schemas"]["DialogueTurn"][];
            context?: string | null;
            label?: string | null;
            summary?: string | null;
            locationId?: string | null;
            locationName?: string | null;
            timestamp?: string | null;
            mood?: string | null;
            kind?: string | null;
            title?: string | null;
            subtitle?: string | null;
            ordinal?: number | null;
            epigraph?: string | null;
            epigraphAttribution?: string | null;
            povCharacterId?: string | null;
            povCharacterName?: string | null;
            timelineMarker?: string | null;
            themeTags?: string[];
            status?: string | null;
            owner?: string | null;
            lastUpdated?: string | null;
            narrativeContext?: components["schemas"]["NarrativeContext"] | null;
            sceneDetails?: components["schemas"]["SceneDetails"] | null;
        };
        PatchedChapterContextVisibilityUpdateRequest: {
            items?: components["schemas"]["ChapterContextVisibilityUpdateItem"][];
        };
        PatchedChapterUpsert: {
            id?: string;
            title?: string;
            summary?: string | null;
            ordinal?: number;
            tokens?: number | null;
            wordCount?: number | null;
        };
        PatchedContextItemsUpdateRequest: {
            items?: components["schemas"]["ContextItemUpdate"][];
        };
        /**
         * @description * `before` - before
         *     * `after` - after
         *     * `append` - append
         * @enum {string}
         */
        PlacementEnum: "before" | "after" | "append";
        SceneDetails: {
            locationId?: string | null;
            locationName?: string | null;
            timestamp?: string | null;
            mood?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    editor_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EditorState"];
                };
            };
        };
    };
    library_block_conversions_apply_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversion_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BlockConversionApply"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChapterDetail"];
                };
            };
        };
    };
    library_books_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryBooksResponse"];
                };
            };
        };
    };
    library_books_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookUpsert"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryBook"];
                };
            };
        };
    };
    library_books_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                book_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    library_books_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                book_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBookUpsert"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryBook"];
                };
            };
        };
    };
    library_books_chapters_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                book_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChapterUpsert"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChapterSummary"];
                };
            };
        };
    };
    library_books_context_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                book_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryResponse"];
                };
            };
        };
    };
    library_books_context_items_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                book_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContextItemCreate"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryResponse"];
                };
            };
        };
    };
    library_books_context_items_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                book_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedContextItemsUpdateRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryResponse"];
                };
            };
        };
    };
    library_books_context_items_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                book_id: string;
                item_id: string;
                section_slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    library_chapters_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chapter_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChapterDetail"];
                };
            };
        };
    };
    library_chapters_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chapter_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedChapterUpsert"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChapterSummary"];
                };
            };
        };
    };
    library_chapters_block_conversions_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chapter_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BlockConversionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockConversionResponse"];
                };
            };
        };
    };
    library_chapters_blocks_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chapter_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChapterBlockCreate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChapterDetail"];
                };
            };
        };
    };
    library_chapters_blocks_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                block_id: string;
                chapter_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    library_chapters_blocks_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                block_id: string;
                chapter_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedChapterBlockUpdate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChapterDetail"];
                };
            };
        };
    };
    library_chapters_blocks_versions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                block_id: string;
                chapter_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChapterBlockVersionList"];
                };
            };
        };
    };
    library_chapters_blocks_versions_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                block_id: string;
                chapter_id: string;
                version: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    library_chapters_context_visibility_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chapter_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryResponse"];
                };
            };
        };
    };
    library_chapters_context_visibility_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chapter_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedChapterContextVisibilityUpdateRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryResponse"];
                };
            };
        };
    };
    library_chapters_paragraph_suggestion_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chapter_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ParagraphSuggestionRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParagraphSuggestionResponse"];
                };
            };
        };
    };
    library_chapters_paragraph_suggestion_prompt_retrieve: {
        parameters: {
            query?: {
                /** @description Identificador del bloque de párrafo para contextualizar el prompt. */
                blockId?: string;
                /** @description Instrucciones personalizadas que se incluirán en el prompt. */
                instructions?: string;
            };
            header?: never;
            path: {
                chapter_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParagraphSuggestionPromptResponse"];
                };
            };
        };
    };
}
