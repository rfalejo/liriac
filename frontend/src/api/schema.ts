/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/editor/": {
    /** @description Return the current editor snapshot. */
    get: operations["editor_retrieve"];
  };
  "/api/library/": {
    /** @description Return the available context sections for the local library. */
    get: operations["library_retrieve"];
  };
  "/api/library/books/": {
    /** @description Return the list of books and chapter summaries. */
    get: operations["library_books_retrieve"];
  };
  "/api/library/chapters/{chapter_id}/": {
    /** @description Return the full content for a single chapter. */
    get: operations["library_chapters_retrieve"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ChapterBlock: {
      id: string;
      type: components["schemas"]["ChapterBlockTypeEnum"];
      position: number;
      text?: string;
      style?: string | null;
      tags?: string[];
      turns?: components["schemas"]["DialogueTurn"][];
      context?: string | null;
      label?: string | null;
      summary?: string | null;
      locationId?: string | null;
      locationName?: string | null;
      timestamp?: string | null;
      mood?: string | null;
      kind?: string | null;
      title?: string | null;
      subtitle?: string | null;
      ordinal?: number | null;
      epigraph?: string | null;
      epigraphAttribution?: string | null;
      povCharacterId?: string | null;
      povCharacterName?: string | null;
      timelineMarker?: string | null;
      themeTags?: string[];
      status?: string | null;
      owner?: string | null;
      lastUpdated?: string | null;
    };
    /**
     * @description * `paragraph` - paragraph
     * * `dialogue` - dialogue
     * * `scene_boundary` - scene_boundary
     * * `metadata` - metadata
     * @enum {string}
     */
    ChapterBlockTypeEnum:
      | "paragraph"
      | "dialogue"
      | "scene_boundary"
      | "metadata";
    ChapterDetail: {
      id: string;
      title: string;
      summary?: string | null;
      ordinal: number;
      tokens?: number | null;
      wordCount?: number | null;
      content: string;
      paragraphs: string[];
      blocks: components["schemas"]["ChapterBlock"][];
      bookId?: string | null;
      bookTitle?: string | null;
    };
    ChapterSummary: {
      id: string;
      title: string;
      summary?: string | null;
      ordinal: number;
      tokens?: number | null;
      wordCount?: number | null;
    };
    ContextItem: {
      id: string;
      type: components["schemas"]["ContextItemTypeEnum"];
      name?: string;
      role?: string;
      summary?: string;
      title?: string;
      description?: string;
      facts?: string;
      tokens?: number;
      checked?: boolean;
      disabled?: boolean;
    };
    /**
     * @description * `character` - character
     * * `world` - world
     * * `styleTone` - styleTone
     * * `chapter` - chapter
     * @enum {string}
     */
    ContextItemTypeEnum: "character" | "world" | "styleTone" | "chapter";
    ContextSection: {
      id: string;
      title: string;
      defaultOpen?: boolean;
      items: components["schemas"]["ContextItem"][];
    };
    DialogueTurn: {
      speakerId?: string | null;
      speakerName?: string | null;
      utterance: string;
      stageDirection?: string | null;
      tone?: string | null;
    };
    EditorState: {
      content: string;
      paragraphs: string[];
      blocks: components["schemas"]["ChapterBlock"][];
      tokens: number;
      cursor?: number | null;
      bookId?: string | null;
      bookTitle?: string | null;
      chapterId?: string | null;
      chapterTitle?: string | null;
    };
    LibraryBook: {
      id: string;
      title: string;
      author?: string | null;
      synopsis?: string | null;
      chapters: components["schemas"]["ChapterSummary"][];
    };
    LibraryBooksResponse: {
      books: components["schemas"]["LibraryBook"][];
    };
    LibraryResponse: {
      sections: components["schemas"]["ContextSection"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** @description Return the current editor snapshot. */
  editor_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EditorState"];
        };
      };
    };
  };
  /** @description Return the available context sections for the local library. */
  library_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LibraryResponse"];
        };
      };
    };
  };
  /** @description Return the list of books and chapter summaries. */
  library_books_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LibraryBooksResponse"];
        };
      };
    };
  };
  /** @description Return the full content for a single chapter. */
  library_chapters_retrieve: {
    parameters: {
      path: {
        chapter_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ChapterDetail"];
        };
      };
    };
  };
}
