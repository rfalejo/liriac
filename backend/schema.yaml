openapi: 3.0.3
info:
  title: Liriac API
  version: 1.0.0
  description: API for the liriac writing application
paths:
  /api/v1/books/:
    get:
      operationId: books_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBookList'
          description: ''
    post:
      operationId: books_create
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Book'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
          description: ''
  /api/v1/books/{book_pk}/chapters/:
    get:
      operationId: books_chapters_list
      parameters:
      - in: path
        name: book_pk
        schema:
          type: integer
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedChapterListList'
          description: ''
    post:
      operationId: books_chapters_create
      parameters:
      - in: path
        name: book_pk
        schema:
          type: integer
        required: true
      tags:
      - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChapterCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChapterCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChapterCreate'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterList'
          description: ''
  /api/v1/books/{id}/:
    get:
      operationId: books_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this book.
        required: true
      tags:
      - books
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
          description: ''
  /api/v1/chapters/{id}/autosave/:
    post:
      operationId: chapters_autosave_create
      description: POST /api/v1/chapters/<id>/autosave/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - chapters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Autosave'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Autosave'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Autosave'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  saved:
                    type: boolean
                  checksum:
                    type: string
                  saved_at:
                    type: string
                    format: date-time
                required:
                - saved
                - checksum
                - saved_at
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad request
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Chapter not found
          description: ''
  /api/v1/chapters/{id}/:
    get:
      operationId: chapters_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this chapter.
        required: true
      tags:
      - chapters
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterDetail'
          description: ''
    put:
      operationId: chapters_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this chapter.
        required: true
      tags:
      - chapters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChapterDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChapterDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChapterDetail'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterDetail'
          description: ''
    patch:
      operationId: chapters_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this chapter.
        required: true
      tags:
      - chapters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChapterDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChapterDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChapterDetail'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterDetail'
          description: ''
  /api/v1/health/:
    get:
      operationId: health_retrieve
      description: Health check endpoint.
      tags:
      - health
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                required:
                - status
          description: ''
  /api/v1/personas/:
    get:
      operationId: personas_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - personas
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPersonaList'
          description: ''
    post:
      operationId: personas_create
      tags:
      - personas
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Persona'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Persona'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Persona'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Persona'
          description: ''
  /api/v1/personas/{id}/:
    get:
      operationId: personas_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this persona.
        required: true
      tags:
      - personas
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Persona'
          description: ''
    put:
      operationId: personas_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this persona.
        required: true
      tags:
      - personas
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Persona'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Persona'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Persona'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Persona'
          description: ''
    patch:
      operationId: personas_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this persona.
        required: true
      tags:
      - personas
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPersona'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPersona'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPersona'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Persona'
          description: ''
components:
  schemas:
    Autosave:
      type: object
      properties:
        body:
          type: string
        checksum:
          type: string
          maxLength: 64
      required:
      - body
      - checksum
    Book:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        slug:
          type: string
          maxLength: 200
          pattern: ^[-a-zA-Z0-9_]+$
        created_at:
          type: string
          format: date-time
          readOnly: true
        last_opened:
          type: string
          format: date-time
          readOnly: true
          nullable: true
      required:
      - created_at
      - id
      - last_opened
      - slug
      - title
    ChapterCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        body:
          type: string
        checksum:
          type: string
          pattern: ^[0-9a-f]{64}$
          maxLength: 64
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - checksum
      - id
      - order
      - title
      - updated_at
    ChapterDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        book:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        body:
          type: string
        checksum:
          type: string
          pattern: ^[0-9a-f]{64}$
          maxLength: 64
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - book
      - checksum
      - created_at
      - id
      - order
      - title
      - updated_at
    ChapterList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - id
      - order
      - title
      - updated_at
    PaginatedBookList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Book'
    PaginatedChapterListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ChapterList'
    PaginatedPersonaList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Persona'
    PatchedChapterDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        book:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        body:
          type: string
        checksum:
          type: string
          pattern: ^[0-9a-f]{64}$
          maxLength: 64
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedPersona:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        role:
          type: string
          maxLength: 50
        notes:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
    Persona:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        role:
          type: string
          maxLength: 50
        notes:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - name
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
